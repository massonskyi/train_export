import cv2
from ultralytics import YOLO
from typing import NewType, Any, Union
from utils import Tools
Result = NewType('Result', Any)

class YoloModelWorker:
    def __init__(self, model_path: str, weights_path: str = None) -> None:
        """
        :param model_path: path to the model weights file ['custom weights.pt', 'yolov{num}.pt', 'yolom{num}.yaml']
        """
        if not isinstance(model_path, str):
            raise TypeError("model_path must be a string")

        try:
            if weights_path is None:
                self._model = YOLO(model_path)
                self._model_path = model_path
            else:
                self._model = YOLO(model_path).load(weights_path)
                self._model_path = model_path
        except Exception as e:
            raise ValueError("Invalid model path") from e

    @Tools.timeit
    def train(self,
        data=None,
        epochs=100,
        time=None,
        patience=100,
        batch=16,
        imgsz=640,
        save=True,
        save_period=-1,
        cache=False,
        device=None,
        workers=8,
        project=None,
        name=None,
        exist_ok=False,
        pretrained=False,
        optimizer='auto',
        verbose=False,
        seed=0,
        deterministic=True,
        single_cls=False,
        rect=False,
        cos_lr=False,
        close_mosaic=10,
        resume=False,
        amp=True,
        fraction=1.0,
        profile=False,
        freeze=None,
        lr0=0.01,
        lrf=0.01,
        momentum=0.937,
        weight_decay=0.0005,
        warmup_epochs=3.0,
        warmup_momentum=0.8,
        warmup_bias_lr=0.1,
        box=7.5,
        cls=0.5,
        pose=12.0,
        kobj=2.0,
        label_smoothing=0.0,
        nbs=64,
        overlap_mask=True,
        mask_ratio=4,
        dropout=0.0,
        val=True,
        plots=False
    ) -> Result:
        """
        :param data: Путь к файлу конфигурации набора данных (например, coco128.yaml).Этот файл содержит специфические для набора данных параметры, включая пути к тренировочным и валидационным данным, названия классов и их количество.
        :param epochs: Общее количество тренировочных эпох. Каждая эпоха представляет собой полный проход по всему набору данных.Настройка этого значения может повлиять на продолжительность обучения и производительность модели.
        :param time: Максимальное время тренировки в часах.Если установлено, то оно отменяет значение epochs аргумент, позволяющий автоматически прекратить тренировку по истечении указанной продолжительности.Полезно для сценариев тренировок с ограниченным временем.
        :param patience: Количество эпох, которое нужно подождать, пока не улучшатся показатели валидации, чтобы досрочно прекратить обучение.Помогает предотвратить чрезмерную подгонку, останавливая обучение, когда производительность достигает плато.
        :param batch: Размер партии для обучения, указывающий, сколько изображений обрабатывается перед обновлением внутренних параметров модели. AutoBatch (batch=-1) динамически регулирует размер партии в зависимости от доступности памяти GPU.
        :param imgsz: Целевой размер изображения для обучения.Перед подачей в модель все изображения изменяются до этого размера. Влияет на точность модели и вычислительную сложность.
        :param save: Включает сохранение контрольных точек тренировки и финальных весов модели. Полезно для возобновления тренировки или развертывания модели.
        :param save_period: 	Частота сохранения контрольных точек модели, указывается в эпохах. Значение -1 отключает эту функцию.Полезно для сохранения промежуточных моделей во время длительных тренировок.
        :param cache: Включает кэширование изображений наборов данных в памяти (True/ram), на диске (disk), или отключить его (False).Повышает скорость тренировок за счет снижения дискового ввода-вывода ценой увеличения использования памяти.
        :param device: Указывается вычислительное устройство (устройства) для обучения: один GPU (device=0), несколько графических процессоров (device=0,1), ПРОЦЕССОР (device=cpu), или MPS для кремния Apple (device=mps).
        :param workers: Количество рабочих потоков для загрузки данных (на RANK если тренировка на нескольких процессорах). Влияет на скорость предварительной обработки данных и подачи их в модель, особенно полезно при работе на нескольких GPU.
        :param project: Имя директории проекта, в которой сохраняются результаты тренировок. Позволяет организовать хранение различных экспериментов.
        :param name: Название тренировочного прогона. Используется для создания подкаталога в папке проекта, где будут храниться журналы тренировок и результаты
        :param exist_ok: Если значение True, это позволяет перезаписать существующий каталог с проектом/именем.Полезно для итеративных экспериментов без необходимости вручную очищать предыдущие результаты.
        :param pretrained: Определяет, начинать ли обучение с предварительно обученной модели.Может быть булевым значением или строковым путем к конкретной модели, из которой загружаются веса.Повышает эффективность обучения и производительность модели.
        :param optimizer: Выбери оптимизатор для тренировки. Варианты включают в себя SGD, Adam, AdamW, NAdam, RAdam, RMSProp и т.д., или auto для автоматического выбора на основе конфигурации модели.Влияет на скорость сходимости и стабильность.
        :param verbose: Включает подробный вывод информации во время тренировки, предоставляя подробные журналы и обновления прогресса. Полезно для отладки и тщательного контроля процесса тренировки.
        :param seed: Задает случайное зерно для тренировки, обеспечивая воспроизводимость результатов в прогонах с одинаковыми конфигурациями.
        :param deterministic: Принуждает использовать детерминированные алгоритмы, что обеспечивает воспроизводимость, но может повлиять на производительность и скорость из-за ограничения на недетерминированные алгоритмы.
        :param single_cls: Во время обучения все классы в многоклассовых наборах данных рассматриваются как один класс. Полезно для задач бинарной классификации или когда внимание сосредоточено на присутствии объекта, а не на классификации.
        :param rect: Включает прямоугольную тренировку, оптимизируя состав партии для минимальной набивки. Это может повысить эффективность и скорость, но может повлиять на точность модели.
        :param cos_lr: Использует косинусный планировщик скорости обучения, настраивая скорость обучения по косинусной кривой в течение эпох. Помогает управлять скоростью обучения для лучшей сходимости.
        :param close_mosaic: 	Отключает увеличение мозаичных данных в последние N эпох, чтобы стабилизировать тренировку перед завершением. Установка значения 0 отключает эту функцию.
        :param resume: Возобнови тренировку с последней сохраненной контрольной точки. Автоматически загружает веса модели, состояние оптимизатора и количество эпох, продолжая тренировку без проблем.
        :param amp: Включает автоматическое обучение со смешанной точностью (AMP), что уменьшает расход памяти и, возможно, ускоряет обучение с минимальным влиянием на точность.
        :param fraction: Указывает, какую часть набора данных использовать для обучения. Позволяет тренироваться на подмножестве полного набора данных, что полезно для экспериментов или при ограниченных ресурсах.
        :param profile: Позволяет профилировать скорости ONNX и TensorRT во время тренировки, что полезно для оптимизации развертывания модели.
        :param freeze: Замораживай первые N слоев модели или указанные слои по индексу, уменьшая количество обучаемых параметров. Полезно для тонкой настройки или трансферного обучения.
        :param lr0: Начальная скорость обучения (т.е. SGD=1E-2, Adam=1E-3) . Настройка этого значения имеет решающее значение для процесса оптимизации, влияя на то, как быстро обновляются веса моделей.
        :param lrf: Конечная скорость обучения как доля от начальной скорости = (lr0 * lrf), используемые вместе с планировщиками для регулировки скорости обучения с течением времени.
        :param momentum: Момент-фактор для SGD или beta1 для оптимизаторов Адама, влияющий на включение прошлых градиентов в текущее обновление.
        :param weight_decay: Член регуляризации L2, штрафующий большие веса, чтобы предотвратить перебор.
        :param warmup_epochs: Количество эпох для разогрева скорости обучения, постепенно увеличивая скорость обучения от низкого значения до начальной скорости обучения, чтобы стабилизировать обучение на ранних этапах.
        :param warmup_momentum: Начальный импульс для фазы разминки, постепенно подстраиваясь под заданный импульс в течение всего периода разминки.
        :param warmup_bias_lr: 	Скорость обучения параметров смещения во время фазы разминки, помогающая стабилизировать обучение модели в начальных эпохах.
        :param box: Вес компонента box loss в функции потерь, влияющий на то, насколько большое внимание уделяется точному предсказанию координат bounding box.
        :param cls: Вес классификационных потерь в общей функции потерь, влияющий на важность правильного предсказания класса относительно других компонентов.
        :param df1:	Вес фокусной потери распределения, используемый в некоторых версиях YOLO для более тонкой классификации.
        :param pose: Вес потери позы в моделях, обученных для оценки позы, влияет на акцент на точное предсказание ключевых точек позы.
        :param kobj: Вес потери объектности ключевой точки в моделях оценки позы, балансирующий между уверенностью в обнаружении и точностью позы.
        :param label_smoothing: Применяет сглаживание меток, смягчая жесткие метки до смеси целевой метки и равномерного распределения по меткам, что может улучшить обобщение.
        :param nbs: Номинальный размер партии для нормализации потерь.
        :param overlap_mask: Определяет, должны ли маски сегментации накладываться друг на друга во время обучения, что применимо в задачах сегментации экземпляров.
        :param mask_ratio: Коэффициент понижения дискретизации для масок сегментации, влияющий на разрешение масок, используемых во время обучения.
        :param dropout: Показатель отсева для регуляризации в задачах классификации, предотвращающий перебор с помощью случайного исключения единиц во время обучения.
        :param val: Включает валидацию во время обучения, позволяя периодически оценивать производительность модели на отдельном наборе данных.
        :param plots: Генерирует и сохраняет графики метрик обучения и проверки, а также примеры предсказаний, обеспечивая визуальное представление о производительности модели и прогрессе обучения.
        :return:
        """
        res = self._model.train(data=data,
            epochs=epochs,
            time=time,
            patience=patience,
            batch=batch,
            imgsz=imgsz,
            save=save,
            save_period=save_period,
            cache=cache,
            device=device,
            workers=workers,
            project=project,
            name=name,
            exist_ok=exist_ok,
            pretrained=pretrained,
            optimizer=optimizer,
            verbose=verbose,
            seed=seed,
            deterministic=deterministic,
            single_cls=single_cls,
            rect=rect,
            cos_lr=cos_lr,
            close_mosaic=close_mosaic,
            resume=resume,
            amp=amp,
            fraction=fraction,
            profile=profile,
            freeze=freeze,
            lr0=lr0,
            lrf=lrf,
            momentum=momentum,
            weight_decay=weight_decay,
            warmup_epochs=warmup_epochs,
            warmup_momentum=warmup_momentum,
            warmup_bias_lr=warmup_bias_lr,
            box=box,
            cls=cls,
            pose=pose,
            kobj=kobj,
            label_smoothing=label_smoothing,
            nbs=nbs,
            overlap_mask=overlap_mask,
            mask_ratio=mask_ratio,
            dropout=dropout,
            val=val,
            plots=plots
        )

        return res

    @Tools.timeit
    def val(self,
        data: str = None,
        imgsz: int = 640,
        batch: int = 16,
        save_json: bool = False,
        save_hybrid: bool = False,
        conf: float = 0.001,
        iou: float = 0.6,
        max_det: int = 300,
        half: bool = True,
        device: str = None,
        dnn: bool = False,
        plots: bool = False,
        rect: bool = False,
        split: str = 'val'
    )  -> Result:
        """

        :param data: Указывает путь к файлу конфигурации набора данных (например, coco128.yaml).Этот файл содержит пути к данным проверки, названия классов и их количество.
        :param imgsz: Определяет размер входных изображений.Перед обработкой все изображения приводятся к этому размеру.
        :param batch: Устанавливает количество изображений в одной партии.Используй -1 для AutoBatch, который автоматически настраивается в зависимости от доступности памяти GPU.
        :param save_json: Если True, сохраняет результаты в JSON-файл для дальнейшего анализа или интеграции с другими инструментами.
        :param save_hybrid: Если True, сохраняет гибридную версию меток, которая сочетает в себе оригинальные аннотации с дополнительными предсказаниями модели.
        :param conf: Устанавливает минимальный порог доверия для обнаружения.Обнаружения с уверенностью ниже этого порога отбрасываются.
        :param iou: Устанавливает порог Intersection Over Union (IoU) для Non-Maximum Suppression (NMS).Помогает уменьшить количество дублирующих обнаружений.
        :param max_det: Ограничивает максимальное количество обнаружений на одном изображении. Полезно в плотных сценах, чтобы избежать чрезмерного количества обнаружений.
        :param half: Обеспечивает вычисления с половинной точностью (FP16),уменьшая потребление памяти и потенциально увеличивая скорость с минимальным влиянием на точность.
        :param device: Указание устройства для проверки (cpu, cuda:0, и т.д.). Позволяет гибко использовать ресурсы CPU или GPU.
        :param dnn: Если True использует модуль OpenCV DNN для вывода моделей ONNX , предлагая альтернативу методам вывода PyTorch .
        :param plots: Если установить значение True, генерирует и сохраняет графики соотношения предсказаний и истины для визуальной оценки работы модели.
        :param rect: Если TrueИспользует прямоугольный вывод для пакетной обработки, уменьшая количество набивки и потенциально увеличивая скорость и эффективность.
        :param split: Определяет разбиение набора данных, которое будет использоваться для проверки (val, test, или train). Позволяет гибко подходить к выбору сегмента данных для оценки производительности.
        :return:
        """

        res = self._model.val(
            data=data,
            imgsz=imgsz,
            batch=batch,
            save_json=save_json,
            save_hybrid=save_hybrid,
            conf=conf,
            iou=iou,
            max_det=max_det,
            half=half,
            device=device,
            dnn=dnn,
            plots=plots,
            rect=rect,
            split=split
        )
        return res


    @Tools.timeit
    def export(self,
        format: str ='torchscript',
        imgsz: int | tuple = 640,
        keras: bool = False,
        optimize: bool = False,
        half: bool = False,
        int8: bool = False,
        dynamic: bool = False,
        simplify: bool = False,
        opset: int = None,
        workspace: float = 4.0,
        nms: bool = False
    ) -> Result:
        """
        Экспорт модели в форматы [NAME, FORMAT, MODEL, METADATA, ARGS]:
        PyTorch:  -, .pt, true,  -,
        TorchScript:  torchscript, .torchscript, true, [imgsz, optimize],
        ONNX: onnx, .onnx, true, [imgsz, half, dynamic, simplify, opset],
        OpenVINO: openvino, model_openvino_model/, true, [imgsz, half, int8],
        TensorRT: engine, .engine, true, [imgsz, half, dynamic, simplify, workspace],
        CoreML: coreml, .mlpackage, true, [imgsz, half, int8, nms],
        TF SavedModel: saved_model, model_saved_model/, true, [imgsz, keras, int8],
        TF GraphDef: pb, .pb, false, [imgsz],
        TF Lite: tflite, .tflite, true, [imgsz, half, int8],
        FT Край TPU: edgetpu, model_edgetpu.tflite, true, [imgsz],
        TF.js: tfjs, model_web_model/, true, [imgsz, half, int8],
        PaddlePaddle: paddle, model_paddle_model/, true, [imgsz],
        NCNN: ncnn, model_ncnn_model/, true, [imgsz, half]
        :param format: Целевой формат экспортируемой модели, например 'onnx', 'torchscript', 'tensorflow', или другие, определяющие совместимость с различными средами развертывания.
        :param imgsz: Желаемый размер изображения на входе модели. Может быть целым числом для квадратных изображений или кортежем (height, width) за конкретные размеры.
        :param keras: Включает экспорт в формат Keras для TensorFlow SavedModel , обеспечивая совместимость с сервисами и API TensorFlow .
        :param optimize: Применяет оптимизацию для мобильных устройств при экспорте в TorchScript, потенциально уменьшая размер модели и улучшая производительность.
        :param half: Включает квантование FP16 (половинной точности), уменьшая размер модели и потенциально ускоряя вывод на поддерживаемом оборудовании.
        :param int8: Активирует квантование INT8, еще больше сжимая модель и ускоряя вывод с минимальной потерей точности, в первую очередь для краевых устройств.
        :param dynamic: Позволяет использовать динамические размеры входных данных для экспорта ONNX и TensorRT , что повышает гибкость при работе с изображениями разных размеров.
        :param simplify: Упрощает граф модели для экспорта ONNX , потенциально улучшая производительность и совместимость.
        :param opset: Указывает версию опенсета ONNX для совместимости с различными парсерами ONNX и режимами выполнения. Если не задано, используется последняя поддерживаемая версия.
        :param workspace: Устанавливает максимальный размер рабочего пространства в Гб для оптимизации TensorRT , балансируя между использованием памяти и производительностью.
        :param nms: 	Добавляет к экспорту CoreML подавление без максимума (NMS), необходимое для точной и эффективной постобработки обнаружения.
        :return:
        """
        res = self._model.export(
            format=format,
            imgsz=imgsz,
            keras=keras,
            optimize=optimize,
            half=half,
            int8=int8,
            dynamic=dynamic,
            simplify=simplify,
            opset=opset,
            workspace=workspace,
            nms=nms
        )
        return res
